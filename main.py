import os
import logging
import time
import random
import re
from typing import Optional, Tuple, List, Set

import requests
import feedparser
from bs4 import BeautifulSoup
from flask import Flask
from telegram import Bot

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ò –°–ï–ö–†–ï–¢–´ =====
TOKEN = os.getenv("8267958305:AAHaHEhrR0X-hZCm9V22cxz2AbJGBOgDSQQ")                 # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
CHAT_ID = os.getenv("@cripta_tg_000")# –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å @–∏–º—è_–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π -100...
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"

# –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –±—É–¥–µ–º –¥–µ—Ä–≥–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /run —á–µ—Ä–µ–∑ Cron –Ω–∞ Render
POST_PARAGRAPHS = (3, 5)   # –ø—É–±–ª–∏–∫—É–µ–º 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤
MAX_TEXT_LEN = 3500        # —á—Ç–æ–±—ã –Ω–µ —É—Ç—ã–∫–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã Telegram, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ

# ===== –û–§–ò–¶–ò–ê–õ–¨–ù–´–ï/–ö–†–£–ü–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò (—Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∏–ª–∏ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º) =====
RSS_FEEDS: List[str] = [
    "https://forklog.com/feed/",                # Forklog (RU)
    "https://bits.media/feed/",                 # Bits.media (RU)
    "https://beincrypto.ru/feed/",              # BeInCrypto (RU)
    "https://www.crypto.ru/feed/",              # Crypto.ru (RU)
    "https://procryptonews.ru/rss",             # ProCryptoNews (RU)
    "https://vc.ru/crypto/rss",                 # VC.ru –ö—Ä–∏–ø—Ç–æ (RU)
    "https://ru.cointelegraph.com/rss",         # Cointelegraph (RU)
    "https://coinpost.ru/rss",                  # CoinPost (RU)
    "https://ru.cryptonews.com/feed/",          # CryptoNews (RU)
    "https://cryptopotato.com/ru/feed/",        # CryptoPotato (RU)
    "https://news.bitcoin.com/feed/",           # Bitcoin.com (EN/RU –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è ‚Üí —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –æ—Ç—Å–µ–µ—Ç –∞–Ω–≥–ª)
    "https://cryptoslate.com/feed/",            # CryptoSlate (EN ‚Üí –ø—Ä–æ–π–¥—ë—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ)
]

# ===== –ü–ê–ú–Ø–¢–¨ –ü–†–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–û–ï (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞) =====
POSTED_FILE = "posted.txt"
posted_links: Set[str] = set()

def load_posted():
    global posted_links
    if os.path.exists(POSTED_FILE):
        with open(POSTED_FILE, "r", encoding="utf-8") as f:
            for line in f:
                url = line.strip()
                if url:
                    posted_links.add(url)

def remember_posted(url: str):
    posted_links.add(url)
    with open(POSTED_FILE, "a", encoding="utf-8") as f:
        f.write(url + "\n")

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =====
CYRILLIC_RE = re.compile(r"[–ê-–Ø–∞-—è–Å—ë]")

def is_russian_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã."""
    if not text:
        return False
    # —É—Å–ª–æ–≤–Ω–æ: –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 40 –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return len(CYRILLIC_RE.findall(text)) >= 40

def fetch_html(url: str) -> Optional[BeautifulSoup]:
    try:
        r = requests.get(url, headers={"User-Agent": USER_AGENT}, timeout=12)
        if r.status_code == 200 and r.content:
            return BeautifulSoup(r.content, "html.parser")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url} ‚Üí {e}")
    return None

def extract_image(entry, soup: Optional[BeautifulSoup]) -> Optional[str]:
    # 1) media_content –∏–∑ RSS
    if hasattr(entry, "media_content") and entry.media_content:
        url = entry.media_content[0].get("url")
        if url and url.startswith("http"):
            return url
    # 2) media_thumbnail –∏–∑ RSS
    if hasattr(entry, "media_thumbnail") and entry.media_thumbnail:
        url = entry.media_thumbnail[0].get("url")
        if url and url.startswith("http"):
            return url
    # 3) —Å—Å—ã–ª–∫–∏ —Å type=image
    if hasattr(entry, "links"):
        for link in entry.links:
            if link.get("type", "").startswith("image"):
                url = link.get("href")
                if url and url.startswith("http"):
                    return url
    # 4) meta og:image / twitter:image —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if soup:
        for prop in ["meta[property='og:image']", "meta[name='twitter:image']"]:
            tag = soup.select_one(prop)
            if tag:
                url = tag.get("content")
                if url and url.startswith("http"):
                    return url
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–µ—Ä–≤–∞—è –≤–∏–¥–∏–º–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —Å—Ç–∞—Ç—å–µ
        img = soup.find("img")
        if img:
            url = img.get("src") or img.get("data-src")
            if url and url.startswith("http"):
                return url
    return None

def extract_paragraphs(soup: BeautifulSoup) -> List[str]:
    # —Å–æ–±–∏—Ä–∞–µ–º –∞–±–∑–∞—Ü—ã
    paragraphs = []
    for p in soup.find_all("p"):
        txt = p.get_text(strip=True)
        if txt and len(txt) > 40:  # –æ—Ç—Å–µ–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
            paragraphs.append(txt)
        if len(paragraphs) >= 12:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —á—Ç–µ–Ω–∏–µ
            break
    return paragraphs

def build_message(title: str, paragraphs: List[str], link: str) -> str:
    # –±–µ—Ä—ë–º 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤
    take = random.randint(POST_PARAGRAPHS[0], POST_PARAGRAPHS[1])
    content = "\n\n".join(paragraphs[:take]).strip()
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    text = f"üì∞ {title}\n\n{content}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"
    if len(text) > MAX_TEXT_LEN:
        text = text[:MAX_TEXT_LEN - 60].rstrip() + f"\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"
    return text

def get_one_russian_news() -> Optional[Tuple[str, str, Optional[str]]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (message_text, image_url, source_link) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏."""
    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–º
    feeds = RSS_FEEDS[:]
    random.shuffle(feeds)

    for feed_url in feeds:
        try:
            feed = feedparser.parse(feed_url)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RSS: {feed_url} ‚Üí {e}")
            continue

        for entry in feed.entries:
            link = entry.get("link")
            if not link or link in posted_links:
                continue

            # –≥—Ä—É–∑–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            soup = fetch_html(link)
            if not soup:
                continue

            # –∞–±–∑–∞—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
            paragraphs = extract_paragraphs(soup)
            if not paragraphs:
                # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: summary –∏–∑ RSS
                summary = BeautifulSoup(entry.get("summary", ""), "html.parser").get_text(" ", strip=True)
                if not is_russian_text(summary):
                    continue
                paragraphs = [summary]

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            all_text = " ".join(paragraphs[:5])
            if not is_russian_text(all_text):
                continue

            title = entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").strip()
            if not is_russian_text(title):
                # –∏–Ω–æ–≥–¥–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ RSS –Ω–∞ EN, –∞ —Å—Ç–∞—Ç—å—è ‚Äî RU. –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç RU.
                pass

            # –∫–∞—Ä—Ç–∏–Ω–∫–∞
            img = extract_image(entry, soup)

            # —Å–æ–±–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = build_message(title, paragraphs, link)

            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏ –æ—Ç–¥–∞—ë–º
            remember_posted(link)
            return message, img, link

    return None

# ===== TELEGRAM =====
bot = Bot(token=TOKEN)

def post_news_once():
    if not TOKEN or not CHAT_ID:
        logging.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –∏–ª–∏ CHAT_ID (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è).")
        return

    news = get_one_russian_news()
    if not news:
        logging.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–∞ —Ä—É—Å—Å–∫–æ–º).")
        return

    message, image_url, _ = news

    try:
        if image_url:
            # caption —É —Ñ–æ—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω ~1024 —Å–∏–º–≤–æ–ª–∞–º–∏ ‚Üí –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            bot.send_photo(chat_id=CHAT_ID, photo=image_url, caption="üì∞ –ù–æ–≤–æ—Å—Ç—å –¥–Ω—è")
            bot.send_message(chat_id=CHAT_ID, text=message)
        else:
            bot.send_message(chat_id=CHAT_ID, text=message)
        logging.info("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ===== FLASK (–¥–ª—è Render –∏ Cron) =====
app = Flask(__name__)

@app.route("/")
def root():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

@app.route("/run")
def run_once():
    post_news_once()
    return "–û–ö"

if __name__ == "__main__":
    load_posted()
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –∑–∞–ø—É—Å—Ç–∏—Ç gunicorn –∏–∑ Procfile)
    app.run(host="0.0.0.0", port=8080)
